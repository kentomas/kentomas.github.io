{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\ud83d\udc4b Hi, I\u2019m @kentomas</p>"},{"location":"Dev%20Topics/Authentication%20and%20Authorization/Authentication%20and%20Authorization/","title":"Authentication and Authorization","text":""},{"location":"Dev%20Topics/Authentication%20and%20Authorization/Authentication%20and%20Authorization/#authentication-methods","title":"Authentication Methods","text":"<ul> <li> Authenticate using Google.</li> <li> Authenticate using Apple.</li> <li> Authenticate using username and password</li> </ul>"},{"location":"Dev%20Topics/Authentication%20and%20Authorization/Authentication%20and%20Authorization/#references","title":"References","text":"<ul> <li> <p>Scaffold Identitiy in ASP.NET Core projects  </p> <p>https://learn.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-6.0&amp;tabs=visual-studio</p> </li> <li> <p>Scaffold Identity into an MVC project without existing authorization</p> <p>https://learn.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-6.0&amp;tabs=visual-studio#scaffold-identity-into-an-mvc-project-without-existing-authorization</p> </li> </ul>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/","title":"Common Azure Tasks","text":"<p>This section details the common tasks a developer would need to know when using Azure.</p> <p>Reference: https://learn.microsoft.com/en-us/azure/app-service/</p>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/#getting-started","title":"Getting Started","text":"<ul> <li> Deploy an ASP.NET web app with Github Actions</li> <li> Deploy a Java app with Github Actions</li> </ul>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/#common-tasks","title":"Common Tasks","text":"<ul> <li> Map a custom DNS name</li> <li> Set up staging environments</li> </ul>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/#crud-app-with-database","title":"CRUD app with database","text":"<ul> <li> Build an ASP.NET Core and Azure SQL Database app</li> <li> Build a Java Spring Boot web app with Azure App Service on Linux and Azure Cosmos DB</li> </ul>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/#secure","title":"Secure","text":"<ul> <li> Secure Azure SQL Database connection from App Service without connection secrets</li> <li> Enable authentication in App Service and access storage without secrets</li> <li> Connect securely to services with Key Vault secrets</li> </ul>"},{"location":"Dev%20Topics/Azure/Common%20Azure%20Tasks/#run-custom-containers","title":"Run custom containers","text":"<ul> <li> Run a custom container</li> </ul> <p>Azure Resources</p> <ul> <li>Azure App Service Documentation</li> <li>Azure Resources</li> </ul>"},{"location":"Dev%20Topics/Branch%20Strategy/Branch%20Strategy/","title":"Branch Strategy","text":""},{"location":"Dev%20Topics/Branch%20Strategy/Branch%20Strategy/#workflows","title":"Workflows","text":"<p>Source: https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow</p> <ol> <li>Gitflow Workflow (preferred)<ul> <li>Branches:<ul> <li>main</li> <li>develop</li> <li>release</li> <li>feature</li> <li>hotfix</li> </ul> </li> </ul> </li> <li>Centralized Workflow<ul> <li>A.K.A Trunk-based development</li> <li>One branch to rule them all.</li> <li>Use feature toggles to enable/disable incomplete features.</li> </ul> </li> <li>Feature Branch Workflow</li> <li>Forking Workflow</li> </ol>"},{"location":"Dev%20Topics/Databases/Entity%20Framework/","title":"Entity Framework","text":""},{"location":"Dev%20Topics/Databases/Entity%20Framework/#join-query-in-entity-framework","title":"Join Query In Entity Framework","text":"<p>Source: https://www.tektutorialshub.com/entity-framework/join-query-entity-framework/</p> C# <pre><code>using (AdventureWorks db = new AdventureWorks())\n{\nvar person = (from p in db.People\njoin e in db.EmailAddresses\non p.BusinessEntityID equals e.BusinessEntityID\nwhere p.FirstName == \"KEN\"\nselect new {\nID = p.BusinessEntityID,\nFirstName = p.FirstName,\nMiddleName = p.MiddleName,\nLastName = p.LastName,\nEmailID = e.EmailAddress1\n}).ToList();\nforeach (var p in person)\n{\nConsole.WriteLine(\"{0} {1} {2} {3} {4}\", p.ID, p.FirstName, p.MiddleName, p.LastName, p.EmailID);\n}\n}\n</code></pre> <p>Other example:</p> C# <pre><code>using (AdventureWorks db = new AdventureWorks())\n{\nvar person = db.People\n.Join(db.EmailAddresses,\np =&gt; p.BusinessEntityID,\ne =&gt; e.BusinessEntityID,\n(p, e) =&gt; new {\nFirstName = p.FirstName,\nMiddleName = p.MiddleName,\nLastName = p.LastName,\nEmailID = e.EmailAddress1 }\n).Take(5);\nforeach (var p in person)\n{\nConsole.WriteLine(\"{0} {1} {2} Email ID : {3}\", p.FirstName, p.MiddleName, p.LastName, p.EmailID);\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/DevSecOps/Github%20Actions/","title":"Github Actions","text":""},{"location":"Dev%20Topics/DevSecOps/Github%20Actions/#_1","title":"Github Actions","text":""},{"location":"Dev%20Topics/Development%20Environments/Development%20Environments/","title":"Development Environments","text":"<p>In software development, there are several types of deployment environments, including:</p> <ol> <li><code>Development</code>: This is the environment used by developers to write and test code.</li> <li><code>Test</code>: This environment is used to test the software before it is released to production.</li> <li><code>Staging</code>: This is a replica of the production environment used to test the software in a production-like setting before it is released to the public.</li> <li><code>Production</code>: This is the environment where the software is made available to end-users.</li> <li><code>Disaster Recovery</code>: This environment is used to restore the production environment in case of a disaster or outage.</li> <li><code>Sandbox</code>: This environment is used for testing and experimentation, it's typically isolated from the other environments and it's not meant for production use.</li> </ol> <p>Note that different organizations may use different names for their deployment environments, and the specifics of each environment will depend on the organization's needs and infrastructure.</p>"},{"location":"Dev%20Topics/Development%20Environments/Development%20Environments/#differences","title":"Differences","text":""},{"location":"Dev%20Topics/Development%20Environments/Development%20Environments/#staging-vs-testing","title":"Staging vs Testing","text":"<p>The main difference between a test environment and a staging environment is their <code>purpose</code> and level of <code>similarity to the production</code> environment.</p> <p>A test environment is typically used to test the functionality and performance of the software before it is released to production. It is usually set up on a separate server or network and is not identical to the production environment. It is used to test the software in a controlled environment, and any bugs or issues found are addressed before the software is deployed in a staging environment.</p> <p>A staging environment, on the other hand, is a replica of the production environment and is used to test the software in a production-like setting. This environment is as close as possible to the production environment, and it's often used for final testing and validation before the software is deployed to the production environment. The goal is to ensure that the software will work seamlessly when it is released to the public, and to identify any issues that could arise in the production environment.</p> <p>In summary, test environment is used for initial testing and debugging, while staging environment is used for final testing and validation before deployment to production.</p>"},{"location":"Dev%20Topics/Documentation/Markdown/","title":"Markdown","text":""},{"location":"Dev%20Topics/Documentation/Markdown/#markdown_1","title":"Markdown","text":"<p>https://www.markdownguide.org/extended-syntax/</p>"},{"location":"Dev%20Topics/Documentation/Markdown/#mermaid","title":"Mermaid","text":"<p>This is used to create basic UML Diagrams. https://mermaid-js.github.io/mermaid/#/</p>"},{"location":"Dev%20Topics/Documentation/Markdown/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>https://squidfunk.github.io/mkdocs-material/</p>"},{"location":"Dev%20Topics/Domain%20Driven%20Design/Domain%20Driven%20Design/","title":"Domain Driven Design","text":"<p>Resources:</p> <ul> <li>https://www.dddcommunity.org/</li> </ul>"},{"location":"Dev%20Topics/Domain%20Driven%20Design/Domain%20Driven%20Design/#martin-fowler-description","title":"Martin Fowler Description","text":"<p>Source: https://martinfowler.com/tags/domain%20driven%20design.html</p> <p>Domain-Driven Design is an approach to software development that centers the development on programming a domain model that has a rich understanding of the processes and rules of a domain. The name comes from a 2003 book by Eric Evans that describes the approach through a catalog of patterns.</p> <ul> <li><code>Domain Model</code><ul> <li>An object model of the domain that incorporates both behavior and data.</li> <li>A Domain Model creates a web of interconnected objects, where each object represents some meaningful individual, whether as large as a corporation or as small as a single line on an order form.</li> </ul> </li> <li><code>Bounded Context</code><ul> <li>Bounded Context is a central pattern in Domain-Driven Design. It is the focus of DDD's strategic design section which is all about dealing with large models and teams. DDD deals with large models by dividing them into different Bounded Contexts and being explicit about their interrelationships.</li> </ul> </li> <li><code>Command Query Responsibility Segregation</code> (CQRS)<ul> <li>It's a pattern that I first heard described by Greg Young. At its heart is the notion that you can use a different model to update information than the model you use to read information. For some situations, this separation can be valuable, but beware that for most systems CQRS adds risky complexity.</li> </ul> </li> <li><code>DDD Aggregate</code><ul> <li>Aggregate is a pattern in Domain-Driven Design. A DDD aggregate is a <code>cluster of domain object</code>s that can be treated as a single unit. An example may be an order and its line-items, these will be separate objects, but it's useful to treat the order (together with its line items) as a single aggregate.</li> </ul> </li> <li><code>Value Object</code><ul> <li>JavaScript tests equality for js objects by looking at their references, ignoring the values they contain.</li> <li>When checking for equality, depending on the language, verify the evaluation function being used.</li> </ul> </li> </ul>"},{"location":"Dev%20Topics/Domain%20Driven%20Design/Domain%20Driven%20Design/#microsoft","title":"Microsoft","text":"<p>Source: https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/</p>"},{"location":"Dev%20Topics/Domain%20Driven%20Design/Domain%20Driven%20Design/#design-a-ddd-oriented-microservice","title":"Design a DDD-oriented microservice","text":"<p>Source: https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice</p> <p>Domain-driven design (DDD) advocates modeling based on the reality of business as relevant to your use cases. In the context of building applications, DDD talks about problems as domains. It describes independent problem areas as Bounded Contexts (each Bounded Context correlates to a microservice), and emphasizes a common language to talk about these problems. It also suggests many technical concepts and patterns, like domain entities with rich models (no anemic-domain model), value objects, aggregates, and aggregate root (or root entity) rules to support the internal implementation.</p> <ul> <li>Keep the microservice context boundaries relatively small.<ul> <li>First, you want to initially create the smallest possible microservices, although that should not be the main driver; you should create a boundary around things that need cohesion.</li> <li>Second, you want to avoid chatty communications between microservices.</li> <li>These goals can contradict one another. You should balance them by decomposing the system into as many small microservices as you can until you see communication boundaries growing quickly with each additional attempt to separate a new Bounded Context.</li> </ul> </li> <li><code>Layers</code> in DDD microservices (all different projects in the VS Solution)<ul> <li><code>Application Layer</code><ul> <li>ASP.NET Web API</li> <li>Network access to microservice</li> <li>API contracts/implementaiton</li> <li>Comamnds and command handlers</li> <li>Queries (when using ann CQS approach)<ul> <li>Miro ORMs like dapper</li> </ul> </li> </ul> </li> <li><code>Domain Model Layer</code><ul> <li>Domain Entity Model</li> <li>PCO entity classes (clean C# code)</li> <li>Domain entities with data + behaviour</li> <li>DDD Patterns<ul> <li>Domain entity, aggregate</li> <li>Aggregate root, value object</li> <li>Repository contracts/interfaces</li> </ul> </li> </ul> </li> <li><code>Infrastructure Layer</code><ul> <li>Data persistence infrastructure<ul> <li>Repository implementation</li> </ul> </li> <li>Use of ORMs or data access API<ul> <li>Entity Framework Core or any ORM</li> <li>Any noSQL database API</li> </ul> </li> <li>Other infrastructure implementaiton used from the application layer<ul> <li>Logging, cryptography, search engine, etc.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev%20Topics/Error%20Handling/Error%20Handling/","title":"Error Handling","text":""},{"location":"Dev%20Topics/Error%20Handling/Error%20Handling/#global-error-handling","title":"Global error handling","text":"<p>Source: https://www.youtube.com/watch?v=gMwAhKddHYQ Global Error Handling | ASP.NET 6 REST API Following CLEAN ARCHITECTURE &amp; DDD Tutorial | Part 4 by Amichai Mantinband</p> <ol> <li>Via middleware</li> <li>Via Exception filter attribute</li> <li>Problem Details</li> <li>Via error endpoint</li> <li>Custom Problem Details Factory</li> </ol>"},{"location":"Dev%20Topics/Misc/Converting%20dotNET%20Framework%20to%20dotNET%20Standard/","title":"Converting .NET Framework libraries to .NET Standard","text":"<p>https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-migrate-from-dotnet-framework-to-dotnet-standard</p> <ul> <li> <p>.NET Core</p> <p>The latest .NET implementation, open source and available for multiple operating systems. With .NET Core, you can build cross-platform console apps and ASP.NET Core Web applications and cloud services.</p> </li> <li> <p>.NET Standard</p> <p>The set of fundamental APIs, sometimes referred to as the .NET Base Class Library (BCL) that all .NET implementations must implement. By targeting .NET Standard, you can build libraries that you can share across all your .NET apps, no matter on which .NET implementation or operating system they run.</p> </li> <li> <p>Use .NET Portability Analyzer to determine what changes need to be made in libraries in order to convert.</p> </li> </ul>"},{"location":"Dev%20Topics/Misc/DbContext%20and%20DbSet/","title":"DbContext and DbSet","text":"<p>Source: https://learn.microsoft.com/en-us/ef/core/miscellaneous/nullable-reference-types#dbcontext-and-dbset</p> <p>The common practice of having uninitialized DbSet properties on context types is also problematic, as the compiler will now emit warnings for them. This can be fixed as follows:</p> <pre><code>public class NullableReferenceTypesContext : DbContext\n{\npublic DbSet&lt;Customer&gt; Customers =&gt; Set&lt;Customer&gt;();\npublic DbSet&lt;Order&gt; Orders =&gt; Set&lt;Order&gt;();\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n=&gt; optionsBuilder\n.UseSqlServer(\n@\"Server=(localdb)\\mssqllocaldb;Database=EFNullableReferenceTypes;Trusted_Connection=True\");\n}\n</code></pre> <p>OR</p> <pre><code>public DbSet&lt;Customer&gt; Customers = null!;\n</code></pre>"},{"location":"Dev%20Topics/OO%20Design%20Principles/OO%20Design%20Principles/","title":"OO Design Principles","text":""},{"location":"Dev%20Topics/OO%20Design%20Principles/OO%20Design%20Principles/#solid","title":"SOLID","text":"<p>SOLID design principles of object-oriented programming:</p> <ul> <li>The <code>[S]ingle-responsibility principle</code>:<ul> <li>\"There should never be more than one reason for a class to change. In other words, every class should have only one responsibility.</li> </ul> </li> <li>The <code>[O]pen\u2013closed principle</code>:<ul> <li>\"Software entities ... should be open for extension, but closed for modification.\"</li> </ul> </li> <li>The <code>[L]iskov substitution principle</code>:<ul> <li>\"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</li> </ul> </li> <li>The <code>[I]nterface</code> segregation principle:<ul> <li>\"Clients should not be orced to depend upon interfaces that they do not use.\"</li> </ul> </li> <li>The <code>[D]ependency</code> inversion principle:<ul> <li>\"Depend upon abstractions, [not] concretions.\"</li> </ul> </li> </ul>"},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/","title":"Project Structure","text":""},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/#design-a-ddd-oriented-microservice","title":"Design a DDD-oriented microservice","text":"<p>Source:</p> <ul> <li>https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice</li> <li>https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/net-core-microservice-domain-model</li> </ul>"},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/#overview","title":"Overview","text":"<pre><code>graph TD\n    ApplicationLayer --&gt; DomainModelLayer\n    ApplicationLayer --&gt; InfrastructureLayer\n    InfrastructureLayer --&gt; DomainModelLayer</code></pre>"},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/#application-layer","title":"Application Layer","text":"<ul> <li>ASP.NET Web API</li> <li>Network access to microservice</li> <li>API contracts/implementation</li> <li>Commands and command hanlders</li> <li>Queries (when using a CQS approach)</li> </ul>"},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/#domain-model-layer","title":"Domain Model Layer","text":"<ul> <li>Ideally, it must NOTE take dependency on any other layer.</li> <li>Plain Old Class Objects (POCO)</li> <li>Domain Entities with data + behaviour</li> <li>DDD patterns</li> <li>Domain entity, aggregate</li> <li>Aggregate root, value object</li> <li>Repository contracts/interfaces</li> </ul>"},{"location":"Dev%20Topics/Project%20Structure/Project%20Structure/#infrastructure-layer","title":"Infrastructure Layer","text":"<ul> <li>Data Persistence Infrastructure<ul> <li>Repository Implementation</li> </ul> </li> <li>Use of ORMs or data access API<ul> <li>Entity Framework Core or any ORM</li> <li>ADO.NET</li> <li>Any NoSQL database API</li> <li>Other infrastructure implementation used form the application layer</li> <li>Logging</li> </ul> </li> </ul>"},{"location":"Dev%20Topics/Secure%20Software%20Frameworks/Secure%20Software%20Frameworks/","title":"Secure Software Frameworks","text":""},{"location":"Dev%20Topics/Secure%20Software%20Frameworks/Secure%20Software%20Frameworks/#secure-software-frameworks_1","title":"Secure Software Frameworks","text":"<ol> <li>Microsoft SDL</li> <li>NIST SSDF</li> <li>SAFECode</li> <li>BSA Framework for Secure Software</li> <li>ISO27001, ISO27034</li> <li>ISO/IEC/IEEE 12207-2 Systems and Software Engineering - Software life cycle processes</li> </ol>"},{"location":"Dev%20Topics/Secure%20Software%20Frameworks/Secure%20Software%20Frameworks/#microsoft-devsecops","title":"Microsoft DevSecOps","text":"<p>https://www.microsoft.com/en-us/securityengineering/devsecops</p> <ol> <li>Provide Training</li> <li>Define Requirements</li> <li>Define Metrics and Compliance Reporting</li> <li>Use Software Composition Analysis (SCA) and Governance</li> <li>Perform Threat Modeling</li> <li>Use Tools and Automation</li> <li>Keep Credentials Safe</li> <li>Use Continuous Learning and Monitoring</li> </ol>"},{"location":"Dev%20Topics/Software%20Design%20Patterns/Repository%20Pattern/","title":"Repository Pattern","text":"<p>Source: https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design</p>"},{"location":"Dev%20Topics/Software%20Design%20Patterns/Repository%20Pattern/#the-repository-pattern","title":"The Repository pattern","text":"<p>Repositories are classes or components that encapsulate the logic required to access data sources. They centralize common data access functionality, providing better maintainability and decoupling the infrastructure or technology used to access databases from the domain model layer.</p> <p>The Repository pattern is a well-documented way of working with a data source. In the book Patterns of Enterprise Application Architecture, Martin Fowler describes a repository as follows:</p> <p>A repository performs the tasks of an intermediary between the domain model layers and data mapping, acting in a similar way to a set of domain objects in memory. Client objects declaratively build queries and send them to the repositories for answers. Conceptually, a repository encapsulates a set of objects stored in the database and operations that can be performed on them, providing a way that is closer to the persistence layer. Repositories, also, support the purpose of separating, clearly and in one direction, the dependency between the work domain and the data allocation or mapping.</p>"},{"location":"Dev%20Topics/Software%20Design%20Patterns/Repository%20Pattern/#define-one-repository-per-aggregate","title":"Define one repository per aggregate","text":"<p>For each aggregate or aggregate root, you should create one repository class. In a microservice based on Domain-Driven Design (DDD) patterns, the only channel you should use to update the database should be the repositories.</p>"},{"location":"Dev%20Topics/Software%20Design%20Patterns/Software%20Design%20Patterns/","title":"Software Design Patterns","text":"<p>Sources:</p> <ul> <li>https://refactoring.guru/design-patterns/creational-patterns</li> <li>https://github.com/kamranahmedse/design-patterns-for-humans</li> </ul>"},{"location":"Dev%20Topics/Software%20Design%20Patterns/Software%20Design%20Patterns/#creational-patterns","title":"Creational Patterns","text":"Used Name Description x Factory Method Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created. x Abstract Factory Lets you produce families of related objects without specifying their concrete classes. Builder Lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code. Prototype Lets you copy existing objects without making your code dependent on their classes. Singleton Lets you ensure that a class has only one instance, while providing a global access point to this instance."},{"location":"Dev%20Topics/Software%20Design%20Patterns/Software%20Design%20Patterns/#structural-patterns","title":"Structural Patterns","text":"Used Name Description x Adapter Allows objects with incompatible interfaces to collaborate. Bridge Lets you split a large class or a set of closely related classes into two separate hierarchies - abstraction and implementation - which can be developed independently of each other. Composite Lets you compose objects into tree structures and then work with these structures as if they were individual objects. x Decorator Lets you attach new behaviours to objects by placing these objects inside special wrapper objects that contain the behaviours. x Facade Provides a simplified interface to a library, a framework, or any other complex set of classes. Flyweight Lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object. Proxy Lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object. x Repository Repositories are classes or components that encapsulate the logic required to access data sources. They centralize common data access functionality, providing better maintainability and decoupling the infrastructure or technology used to access databases from the domain model layer."},{"location":"Dev%20Topics/Software%20Design%20Patterns/Software%20Design%20Patterns/#behavioural-patterns","title":"Behavioural Patterns","text":"Used Name Description x Command Turns a request into a stand-alone object that contains all information about the request. This transformation lets you pass requests as a method arguments, delay or queue a request's execution, and support undoable operations. x Iterator Lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.). Mediator Lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via mediator object. Memento Lets you save and restore the previous state of an object without revealing the details of its implementation. x Observer Lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they're observing. State Lets an object alter its behaviour when its internal state changes. It appears as if the object changed its class. Strategy Lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable. Template Method Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure. Visitor Lets you separate algorithms from the objects on which they operate."},{"location":"Dev%20Topics/Software%20Development%20Lifecycle/Software%20Development%20Lifecycle/","title":"Software Development Lifecycle","text":"<p>Use Frameworks.</p>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Code%20Coverage/","title":"Code Coverage","text":"<p>This section details how to generate the test code coverage.</p>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Code%20Coverage/#visual-studio-community","title":"Visual Studio Community","text":"<ul> <li>Fine Code Coverage<ul> <li>https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage</li> </ul> </li> </ul>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Code%20Coverage/#visual-studio-enterprise","title":"Visual Studio Enterprise","text":"<p>Source: https://learn.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested?view=vs-2022&amp;tabs=csharp</p> <pre><code>VS Studio &gt; Test &gt; Analyze Code Coverage for All Tests\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/","title":"Test Driven Development","text":"<p>Source</p> <p>From LinkedIn Learning</p> <p>C# Test-Driven Development by: Christian Wenz  </p> <p>Duration: 1h 22m - Intermediate - Released: 9/23/2021</p>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#tdd-theory","title":"TDD Theory","text":""},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#advantages","title":"Advantages","text":"<ol> <li>Small tests lead to modular apps.</li> <li>Refactor early, not late.<ol> <li>Less refactoring later on.</li> </ol> </li> <li>ALlows automated testing.<ol> <li>We write the test but not neccesarily the test runner.</li> </ol> </li> </ol>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#disadvantages","title":"Disadvantages","text":"<ol> <li>Writing tests can be hard.<ol> <li>This is the major block for many.</li> <li>Tests may not be complex and thus not useful.</li> </ol> </li> <li>Initially takes more time.</li> <li>Danger of constant refactoring.<ol> <li>Sometimes no application gets built...</li> </ol> </li> </ol>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#software-and-tooling","title":"Software and Tooling","text":"<p>Testing Frameworks:</p> <ul> <li>MSTest</li> <li>Nunit (preferred)</li> <li>xUnit</li> </ul> <p>Mocking Libraries:</p> <ul> <li>Moq (preferred)</li> <li>NSubstitute</li> <li>FakeItEasy</li> <li>Microsoft Fakes</li> </ul>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#getting-started-with-tdd","title":"Getting Started with TDD","text":""},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#1-create-test-class","title":"1. Create Test Class","text":"C# <pre><code>// ShoppingCartTests.cs\nnamespace HPlusSportTDD.Core\n{\ninternal class ShoppingCartTests\n{\n[SetUp]\npublic void SetUp()\n{\n}\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#2-create-test-method","title":"2. Create Test Method","text":"C# <pre><code>// ShoppingCartTests.cs\nnamespace HPlusSportTDD.Core\n{\ninternal class ShoppingCartTests\n{\n[SetUp]\npublic void SetUp(){}\n[Test]\npublic void ShouldReturnArticleAddedToCard()\n{\n}\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#3-create-basic-test","title":"3. Create Basic Test","text":"<p>Create basic test generating classes and methods only (not implementing them).</p> C# <pre><code>// ShoppingCartTests.cs\nnamespace HPlusSportTDD.Core\n{\ninternal class ShoppingCartTests\n{\n[SetUp]\npublic void SetUp(){}\n[Test]\npublic void ShouldReturnArticleAddedToCard()\n{\nvar item = new AddToCartItem()\n{\nArticleId = 42,\nQuantity = 5\n};\nvar request = new AddToCartRequest()\n{\nitem = item\n};\nvar manager = new ShoppingCartManager();\nAddToCartResponse response = manager.AddToCart(request);\n}\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#4-create-test-assertion","title":"4. Create Test Assertion","text":"C# <pre><code>// ShoppingCartTests.cs\nnamespace HPlusSportTDD.Core\n{\ninternal class ShoppingCartTests\n{\n[SetUp]\npublic void SetUp(){}\n[Test]\npublic void ShouldReturnArticleAddedToCard()\n{\nvar item = new AddToCartItem()\n{\nArticleId = 42,\nQuantity = 5\n};\nvar request = new AddToCartRequest()\n{\nitem = item\n};\nvar manager = new ShoppingCartManager();\nAddToCartResponse response = manager.AddToCart(request);\nAssert.IsNotNull(response);\nAssert.Contains(item, response.Items);\n}\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#5-run-test-to-let-it-fail","title":"5. Run Test To Let It Fail","text":"<pre><code>(Visual Studio)&gt; Ctrl+R, A\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#6-implement-function","title":"6. Implement Function","text":"C# <pre><code>// ShoppingCartManager.cs\nusing System.Collections.Generic;\nnamespace HPlusSportTDD.Core\n{\ninternal class ShoppingCartManager\n{\nprivate List&lt;AddToCartItem&gt; _shoppingCart;\npublic ShoppingCartManager()\n{\n_shoppingCart = new List&lt;AddToCartItem&gt;();\n}\ninternal AddToCartResponse AddToCart(AddToCartRequest request)\n{\nvar item = _shoppingCart.Find(i =&gt; i.ArticleId == request.item.ArticleId);\nif (null != item)\n{\nitem.Quantity += request.item.Quantity;\n}\nelse\n{\n_shoppingCart.Add(request.item);\n}\nreturn new AddToCartResponse()\n{\nItems = _shoppingCart.ToArray()\n};\n}\n}\n}\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#7-run-test-and-confirm-it-passes","title":"7. Run Test And Confirm It Passes","text":"<pre><code>(Visual Studio)&gt; Ctrl+R, A\n</code></pre>"},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#advanced-tdd-techniques","title":"Advanced TDD Techniques","text":""},{"location":"Dev%20Topics/Test%20Driven%20Development/Test%20Driven%20Development/#mocking","title":"Mocking","text":"<ul> <li>What do we do when don't want to use the actual resource?</li> <li>We use \"Mocked\"...</li> </ul> <p>Mock:</p> <ul> <li>Handles indirect outputs of System Under Test (SUT).</li> </ul> <p>Stub:</p> <ul> <li>Handles indirect inputs of SUT.</li> <li>Usually returns hard coded values.</li> </ul> <p>Dummy:</p> <ul> <li>Satisfies the compiler.</li> </ul> <p>Fakes:</p> <ul> <li>Full implementations...</li> <li>e.g. use in-memory database instead of production database.</li> </ul> <p>Use Nuget package <code>Moq</code> by <code>Daniel Cazzulino, kzu</code>.</p>"},{"location":"Dev%20Topics/Time%20Complexity/Time%20Complexity/","title":"Understanding Time Complexity with Simple Examples","text":"<p>Source: https://www.geeksforgeeks.org/understanding-time-complexity-simple-examples/</p> <p>A lot of students get confused while understanding the concept of time complexity, but in this article, we will explain it with a very simple example.</p> <p>Q. Imagine a classroom of 100 students in which you gave your pen to one person. You have to find that pen without knowing to whom you gave it.</p> <p>Here are some ways to find the pen and what the O order is.</p> <ul> <li><code>O(n2)</code>: You go and ask the first person in the class if he has the pen. Also, you ask this person about the other 99 people in the classroom if they have that pen and so on,   This is what we call O(n2).</li> <li><code>O(n)</code>: Going and asking each student individually is O(N).</li> <li> <p><code>O(log n)</code>: Now I divide the class into two groups, then ask: \u201cIs it on the left side, or the right side of the classroom?\u201d Then I take that group and divide it into two and ask again, and so on. Repeat the process till you are left with one student who has your pen. This is what you mean by O(log n).   I might need to do:</p> </li> <li> <p>The <code>O(n2)</code> searches if only one student knows on which student the pen is hidden.</p> </li> <li>The <code>O(n)</code> if one student had the pen and only they knew it.</li> <li>The <code>O(log n)</code> search if all the students knew, but would only tell me if I guessed the right side.</li> </ul>"},{"location":"Dev%20Topics/Time%20Complexity/Time%20Complexity/#constant-time-o1","title":"Constant time - O(1)","text":"<pre><code>using System;\npublic class GFG{\nstatic public void Main (){\n// Code\nConsole.WriteLine(\"Hello World\");\n}\n}\n/\n</code></pre>"},{"location":"Dev%20Topics/Time%20Complexity/Time%20Complexity/#linear-time-on","title":"Linear time - O(n)","text":"<pre><code>using System;\npublic class GFG {\npublic static void Main(String[] args)\n{\nint i, n = 8;\nfor (i = 1; i &lt;= n; i++) {\nConsole.Write(\"Hello World !!!\\n\");\n}\n}\n}\n// This code contributed by Rajput-Ji\n</code></pre>"},{"location":"Dev%20Topics/Time%20Complexity/Time%20Complexity/#logarithmic-time-olog2n","title":"Logarithmic time - O(log2(n))","text":"<pre><code>using System;\npublic class GFG{\nstatic public void Main (){\n// Code\nint i, n = 8;\nfor (i = 1; i &lt;= n; i=i*2) {\nConsole.Write(\"Hello World !!!\\n\");\n}\n}\n}\n// This code is contributed by lokeshmvs21.\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/","title":"Deploy ASP.NET Core with Angular App with Github Actions","text":""},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#overview","title":"Overview","text":"<p>This article outlines the steps required to build and deploy a <code>ASP.NET Core with Angular App</code> to Azure.</p>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#tools","title":"Tools","text":"<ul> <li>Github: Hosts code.</li> <li>Visual Studio 2022 Community: Creates web application.</li> <li>Azure: Hosts web application on internet.</li> <li>Sourcetree: Version control of code.</li> </ul>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#steps","title":"Steps","text":""},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#1-create-repository-in-github","title":"1. Create Repository in Github.","text":"<p>Log into https://github.com and create a repository.</p>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#2-clone-new-repository-locally","title":"2. Clone new repository locally","text":"Powershell<pre><code>PS&gt; git clone ...\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#3-create-branches-following-gitflow","title":"3. Create branches following gitflow.","text":"<ol> <li>main/develop/test</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#4-create-aspnet-core-with-angular-application-locally","title":"4. Create <code>ASP.NET Core with Angular</code> application locally.","text":"<ol> <li>Verify application works using default configuration.</li> <li>Just use the <code>Start Debugging</code> button in Visual Studio Community.</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#5-create-resource-group-in-azure","title":"5. Create <code>Resource Group</code> in Azure.","text":"<ol> <li>NOTES</li> <li>We'll create a Resource Group (RG) per web application for now to make management of the entire system self-contained.</li> <li>STEPS</li> <li>Log into Azure Portal: https://portal.azure.com.</li> <li>Home &gt; Resource groups &gt; Create</li> <li>Fill in details:<ol> <li>Subscription: Pay-As-You-Go</li> <li>Resource Group: \"Dev-RG\"</li> <li>Region: \"Australia East\"</li> </ol> </li> <li>Click \"Review + create\" button.</li> <li>Click \"Create\".</li> <li>Resource group \"Dev-RG\" is now created.</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#6-create-app-azure-app-service-plan","title":"6. Create <code>App Azure App Service Plan</code>.","text":"<ol> <li>Home &gt; Azure Service Plans &gt; Create</li> <li>Fill in details:</li> <li>Subscription\\Resource Group: \"Dev-RG\"<ol> <li>The one we created earlier.</li> </ol> </li> <li>Region: \"Australia East\".<ol> <li>NOTE: Set this first as Azure does some checks, and resets the fields, when this value is changed.</li> </ol> </li> <li>Name: \"DocNumberManager-AppServicePlan\"</li> <li>Operating System: Linux</li> <li>Pricing plan: \"Free F1\"</li> <li>Click \"Review + create\" button.</li> <li>Click \"Create\".</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#7-create-web-app-in-azure","title":"7. Create <code>web app</code> in Azure.","text":"<ol> <li>Home &gt; App Services &gt; Create.</li> <li>Fill in details:<ol> <li>Basics</li> <li>Subscription\\Resource Group: \"Dev-RG\"</li> <li>Region: \"Australia East\"<ol> <li>This will automatically change the selected \"Pricing Plans.<ol> <li>The Pricing Plan should be set to \"DocNumberManager-AppServicePlan\".</li> </ol> </li> </ol> </li> <li>Name: \"DocNumberManager-kentomas\"<ol> <li>NOTE: This name needs to be unique as it will create the website \".azurewebsites.net\" (i.e. DocNumberManager-kentomas.azurewebsites.net) <li>Publish: \"Code\"</li> <li>Runtime stack: \".NET 7 (STS)\"<ol> <li>This is confirmed by the Project within Visual Studio.<ol> <li>Solution 'DocNumberManager' &gt; Project 'DocNumberManager' &gt; \"Right-click\" &gt; Properties &gt; Application &gt; General &gt; Target framework.</li> </ol> </li> </ol> </li> <li>Operating System: \"Linux\"</li> <li>Region: \"Australia East\"</li> <li>Linux Plan (Australia East): \"DocNumberManager-AppServicePlan (F1)\"<ol> <li>Note: This should automatically be set after you select the <code>Runtime stack</code> and <code>Operation System</code>.</li> </ol> </li> <li>Deployment</li> <li>Leave as is.<ol> <li>We will configure this later within Github.</li> </ol> </li> <li>Networking</li> <li>Leave as is.</li> <li>Monitoring</li> <li>Enable Application Insights: Yes<ol> <li>'Yes' is the default.</li> </ol> </li> <li>Click \"Review + Create\".</li> <li> <p>Click \"Create\".</p> </li> <li> <p>Confirm the web app is now live.</p> <ol> <li>Open web browser and navigate to https://DocNumberManager-kentomas.azurewebsites.net</li> </ol> </li>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#8-generate-deployment-credentials","title":"8. Generate deployment credentials.","text":"<ol> <li>We'll follow the \"Publish Profile\" method. Read more</li> <li>Steps<ol> <li>In Azure, navigate to App Service.</li> <li>Home &gt; App Services &gt; DocNumberManager-kentomas &gt; Overview</li> <li>Click on \"Get publish profile\" button.</li> <li>This will download a file called \"DocNumberManager-kentomas.PublishSettings\".</li> <li>The contents of this file will be pasted into Github as a \"secret\".</li> </ol> </li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#9-create-new-github-secret-for-repo","title":"9. Create new Github secret for repo.","text":"<ol> <li>Steps</li> <li>Log in to https://github.com.</li> <li>Navigate to repository \"DocNumberManager\".</li> <li>Settings &gt; Security &gt; Secrets and variables &gt; Actions.</li> <li>Click on \"New repository secret\" button.</li> <li>Fill in the following:<ol> <li>Name: AZURE_WEBAPP_PUBLISH_PROFILE</li> <li>Secret: &lt;&gt;<ol> <li>Open the file \"...\" using notepad or vscode.</li> <li>Copy ALL the contents of the file.</li> <li>Paste the contents into this Secret field.</li> </ol> </li> </ol> </li> <li>Click \"Add secret\".</li> <li>The secret \"AZURE_WEBAPP_PUBLISH_PROFILE\" is now created for the repo \"DocNumberManager\".</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#10-create-environments","title":"10. Create environments","text":"<p>This step is OPTIONAL.</p> <p>Environments production, staging, test, and development.</p>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#11-create-the-github-workflow","title":"11. Create the Github Workflow.","text":"<ol> <li>Steps:<ol> <li>On the website Github, within the repo DocNumberManager, click on \"Actions\".</li> <li>Click on \"New workflow\".</li> <li>Deployment &gt; Deploy a .NET Core app to an Azure Web App &gt; Configure (button)<ol> <li>This will open a new file created in the branch 'main'.<ol> <li>DocNumberManager/.github/workflows/azure-webapps-dotnet-core.yml</li> </ol> </li> </ol> </li> <li>Fill in the following fields:<ol> <li>env<ol> <li>AZURE_WEBAPP_NAME: DocNumberManager-kentomas</li> <li>DOTNET_VERSION: 7</li> <li>This is from the Visual Studio Project Properties.</li> </ol> </li> </ol> </li> <li>Remove the environment field since we did not create an Github environment. (Read more)<ol> <li>jobs &gt; deploy &gt; environment.<ol> <li>Delete all the sub structures of this variable.</li> </ol> </li> </ol> </li> <li>Click \"Start commit\" button.</li> <li>A new file is now created on the <code>main</code> branch.</li> </ol> </li> </ol> <p>NOTE:</p> <pre><code>1. This workflow will be launched after this file is created and committed into `main`.\n2. This workflow will fail because our `main` branch does not contain our web app yet.\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#12-merge-main-branch-with-develop-branch","title":"12. Merge <code>main</code> branch with <code>develop</code> branch.","text":"<ol> <li>This will copy the newly created workflow file into the <code>develop</code> branch.</li> <li> <p>Steps:</p> </li> <li> <p>Go into SourceTree.</p> </li> <li>Change branch to <code>main</code>.</li> <li>Pull.</li> <li>Change branch to <code>develop</code>.</li> <li> <p>Merge <code>main</code> into <code>develop</code>.</p> </li> <li> <p>Confirm the web app still works locally after the merge.</p> </li> <li>Open the VS Solution.</li> <li>Debug app.</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#13-create-pull-request","title":"13. Create Pull Request","text":"<ol> <li>In Github, create a Pull-Request to merge <code>develop</code> branch into <code>main</code> branch.<ol> <li>Click on <code>Pull requests</code>.</li> <li>Click \"Compare &amp; pull request\".</li> <li>Confirm the Pull request states: \"... wants to merge 'x' commits into <code>main</code> from <code>develop</code>.</li> <li>Fill in details:</li> <li>Name: \"Initial deployment\"</li> <li>Description: \"Initial deployment of default ASP.NET Core with Angular website.\"</li> <li>Click \"Create pull request\".</li> </ol> </li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#14-complete-pull-request","title":"14. Complete Pull Request.","text":"<pre><code>1. Review code changes.\n2. Click \"Merge pull request\".\n3. Click \"Confirm merge\" button.\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#15-confirm-deployment","title":"15. Confirm deployment","text":"<p>Go to website https://docnumbermanager-ktomas.azurewebsites.net.</p>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#error-invalid-version-format","title":"Error: Invalid version format!","text":"<pre><code>Error: Invalid version format! Supported: 1.2.3, 1.2, 1.2.x, 1.2.*\n</code></pre> From Github Action Summary<pre><code>&gt; Run actions/setup-dotnet@v2\nwith:\ndotnet-version: 7\ninclude-prerelease: false\nenv:\nAZURE_WEBAPP_NAME: DocNumberManager-kentomas\nAZURE_WEBAPP_PACKAGE_PATH: ./DocNumberManager/\nDOTNET_VERSION: 7\nError: Invalid version format! Supported: 1.2.3, 1.2, 1.2.x, 1.2.*\n</code></pre> <p>To fix, change the DOTNET_VERSION to \"7.x\".</p> azure-webapps-dotnet-core.yml<pre><code># FILE: DocNumberManager/.github/workflows/azure-webapps-dotnet-core.yml\nname: Build and deploy ASP.Net Core app to an Azure Web App\nenv:\nAZURE_WEBAPP_NAME: DocNumberManager-kentomas # set this to the name of your Azure Web App\nAZURE_WEBAPP_PACKAGE_PATH: \".\" # set this to the path to your web app project, defaults to the repository root\nDOTNET_VERSION: \"7.x\" # set this to the .NET Core version to use\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#error-specify-a-project-or-solution-file","title":"Error: Specify a project or solution file.","text":"<p>This error is caused because the *.sln file could not be found when attempting to run the CLI command <code>dotnet build --configuraiton Release</code>.</p> The error in the Github action summary<pre><code>&gt; Run dotnet build --configuration Release\nMSBuild version 17.4.1+9a89d02ff for .NET\nMSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.\nError: Process completed with exit code 1.\n</code></pre> <p>To fix:</p> <p>3 changes:</p> <ol> <li>Add a <code>SOLUTION_PATH</code> variable to define the path of the soltion.</li> <li>Update the <code>build</code> step to use this new <code>SOLUTION_PATH</code> variable.</li> <li>Update the <code>publish</code> step to use this new <code>SOLUTION_PATH</code> variable.</li> </ol> azure-webapps-dotnet-core.yml<pre><code>name: Build and deploy ASP.Net Core app to an Azure Web App\nenv:\nAZURE_WEBAPP_NAME: DocNumberManager-kentomas # Name of your Azure Web App\nAZURE_WEBAPP_PACKAGE_PATH: \".\" # Path to web app project, defaults to the repository root\nDOTNET_VERSION: \"7.x\" # The .NET Core version to use\nSOLUTION_PATH: \"./DocNumberManager/\" # Directory of *.sln file\njobs:\nbuild:\nsteps:\n- name: Build with dotnet\nrun: dotnet build ${{env.SOLUTION_PATH}} --configuration Release\n- name: dotnet publish\nrun: dotnet publish ${{env.SOLUTION_PATH}} -c Release -o ${{env.DOTNET_ROOT}}/myapp\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#dont-know-if-we-need-the-following","title":"Don't know if we need the following..","text":"<ol> <li>Setup Deployments Slots in Azure?</li> </ol> <p>Note</p> <ol> <li>We want to only push to Azure after the code has been reviewed, i.e. a Pull-Request has been completed.</li> <li>We want to push to a test environment first before pushing to production.<ol> <li>So we need to work out how to push to the correct Azure Slot (i.e. Production or Test).</li> </ol> </li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#references","title":"References","text":"<ol> <li>https://learn.microsoft.com/en-us/azure/app-service/app-service-sql-asp-github-actions</li> <li>https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-azure/deploying-net-to-azure-app-service</li> <li>Generate Deployment Details - https://learn.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials</li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#samples","title":"Samples","text":""},{"location":"Getting%20Started%20Guides/Deploy%20ASP.NET%20Core%20with%20Angular%20App%20with%20Github%20Actions/#github-workflow","title":"Github Workflow","text":"azure-webapps-dotnet-core.yml<pre><code># This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.\n#\n# This workflow assumes you have already created the target Azure App Service web app.\n# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&amp;pivots=development-environment-vscode\n#\n# To configure this workflow:\n#\n# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.\n#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials\n#\n# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.\n#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret\n#\n# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.\n#\n# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions\n# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy\n# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples\nname: Build and deploy ASP.Net Core app to an Azure Web App\nenv:\nAZURE_WEBAPP_NAME: DocNumberManager-kentomas # set this to the name of your Azure Web App\nAZURE_WEBAPP_PACKAGE_PATH: \".\" # set this to the path to your web app project, defaults to the repository root\nDOTNET_VERSION: \"5\" # set this to the .NET Core version to use\non:\npush:\nbranches: [\"main\"]\nworkflow_dispatch:\npermissions:\ncontents: read\njobs:\nbuild:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- name: Set up .NET Core\nuses: actions/setup-dotnet@v2\nwith:\ndotnet-version: ${{ env.DOTNET_VERSION }}\n- name: Set up dependency caching for faster builds\nuses: actions/cache@v3\nwith:\npath: ~/.nuget/packages\nkey: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}\nrestore-keys: |\n${{ runner.os }}-nuget-\n- name: Build with dotnet\nrun: dotnet build --configuration Release\n- name: dotnet publish\nrun: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp\n- name: Upload artifact for deployment job\nuses: actions/upload-artifact@v3\nwith:\nname: .net-app\npath: ${{env.DOTNET_ROOT}}/myapp\ndeploy:\npermissions:\ncontents: none\nruns-on: ubuntu-latest\nneeds: build\nsteps:\n- name: Download artifact from build job\nuses: actions/download-artifact@v3\nwith:\nname: .net-app\n- name: Deploy to Azure Web App\nid: deploy-to-webapp\nuses: azure/webapps-deploy@v2\nwith:\napp-name: ${{ env.AZURE_WEBAPP_NAME }}\npublish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}\npackage: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}\n</code></pre>"},{"location":"Getting%20Started%20Guides/Deploy%20an%20ASP.NET%20Web%20App%20API%20with%20Github%20Actions/","title":"Deploy an ASP.NET Web App API with Github Actions","text":""},{"location":"Getting%20Started%20Guides/Deploy%20an%20ASP.NET%20Web%20App%20API%20with%20Github%20Actions/#outline","title":"Outline","text":"<ol> <li>Create Repository in Github.</li> <li>Clone new repository locally.</li> <li>Create branches following gitflow.<ol> <li>main/develop/test</li> </ol> </li> <li>Create ASP.NET Web API application locally.<ol> <li>Verify api works using Swagger.</li> </ol> </li> <li>Create Resource Group in Azure.</li> <li>Create App Service within created Resource Group in Azure.<ol> <li>Create app service plan?</li> </ol> </li> <li>Setup Deployments Slots in Azure?</li> <li> <p>On Github, create a Github Action.</p> <ol> <li>Fill <code>*.yml</code> file using provided example.</li> </ol> </li> </ol> <p>Note</p> <ol> <li>We want to only push to Azure after the code has been reviewed, i.e. a Pull-Request has been completed.</li> <li>We want to push to a test environment first before pushing to production.<ol> <li>So we need to work out how to push to the correct Azure Slot (i.e. Production or Test).</li> </ol> </li> </ol>"},{"location":"Getting%20Started%20Guides/Deploy%20an%20Angular%20App%20with%20Github%20Actions/","title":"Deploy an Angular App to Azure with Github Actions","text":"<p>This section details an overview in how to deploy an Angular App (front-end only) to Azure.</p>"},{"location":"Glossary/Glossary/","title":"Glossary","text":"<ul> <li><code>immutable</code> - unable to be changed.</li> <li><code>aggregate</code> - a cluster of domain objects that can be treated as a single unit.</li> <li><code>Ubiquitous Language</code> - A ubiquitous language is a vocabulary shared by everyone involved in a project, from domain experts to stakeholders, to project managers, to developers.</li> </ul>"},{"location":"Sample%20Projects/Sample%20Projects/","title":"Sample Projects","text":""},{"location":"Sample%20Projects/Sample%20Projects/#top-3-voted-candidates","title":"Top 3 Voted Candidates","text":"<p>Design a system that gets a list of lists of votes and return top 3 candidate.</p>"},{"location":"Sample%20Projects/Sample%20Projects/#tagging-system","title":"Tagging System","text":"<p>Design a product agnostic tagging system where you can add/update/delete the tag, listing all pages for a given tag, dashboard for popular tags.</p>"},{"location":"Tools/VSCode/","title":"VS Code","text":""},{"location":"Tools/VSCode/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Description <code>Shift</code> + <code>Alt</code> + <code>K</code> + <code>I</code> Multi-line selection. <code>Shift</code> + <code>Alt</code>+<code>F</code> Format Document. <code>Shift</code> + <code>Ctrl</code> + <code>P</code> Show Command Pallete. <code>Alt</code> + <code>Z</code> Toggle line-wrap. <code>Ctrl</code> + <code>~</code> Toggle in-built command prompt."}]}